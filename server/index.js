import express from 'express';
import fetch from 'node-fetch';
import { Telegraf, Markup } from 'telegraf';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

if (!process.env.BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

console.log('BOT_TOKEN:', process.env.BOT_TOKEN);
console.log('REACT_APP_URL:', process.env.REACT_APP_URL);
console.log('VITE_PROXY_URL:', process.env.VITE_PROXY_URL);
console.log('PORT:', PORT);

const bot = new Telegraf(process.env.BOT_TOKEN);
const REACT_APP_URL = process.env.REACT_APP_URL || 'https://mythaicomp.ru';

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

bot.start(async (ctx) => {
    const username = ctx.from.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    console.log(`${username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
    try {
        await ctx.reply(
            `–ü—Ä–∏–≤–µ—Ç, @${username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –æ—Ç–ø—É—Å–∫ –≤ –¢–∞–π–ª–∞–Ω–¥–µ –µ—â—ë –ª—É—á—à–µ –∏ –ø—Ä–æ—â–µ!`
        );
        ctx.reply('–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', Markup.inlineKeyboard([
            Markup.button.webApp('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', REACT_APP_URL),
        ]));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    }
});

bot.on('web_app_data', (ctx) => {
    const webAppData = ctx.webAppData;
    console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', webAppData);
});

app.get('/yandex-proxy', async (req, res) => {
    try {
        const yandexUrl = req.query.url;
        console.log('–ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å –¥–ª—è URL:', yandexUrl);

        const response = await fetch(yandexUrl, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            },
        });

        res.set('Content-Type', response.headers.get('Content-Type'));
        response.body.pipe(res);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ /yandex-proxy:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
});

app.post('/bot', (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram –Ω–∞ /bot');
    bot.handleUpdate(req.body);
    res.sendStatus(200);
});

app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    const webhookUrl = `https://mythaicomp.ru/bot`;
    bot.telegram.setWebhook(webhookUrl).then(() => {
        console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    }).catch((error) => {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook:', error);
    });
});

process.once('SIGINT', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞');
    bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞');
    bot.stop('SIGTERM');
});