import express from 'express';
import fetch from 'node-fetch';
import { Telegraf, Markup } from 'telegraf';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join as pathJoin } from 'path';

//–ª–µ–∂–∏—Ç –Ω–∞ Render

// –ü–æ–ª—É—á–∞–µ–º __dirname –≤ ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000; // Render –∑–∞–¥–∞—Å—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ PORT

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ BOT_TOKEN —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!process.env.BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

// –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('BOT_TOKEN:', process.env.BOT_TOKEN);
console.log('REACT_APP_URL:', process.env.REACT_APP_URL);
console.log('PORT:', PORT);

const bot = new Telegraf(process.env.BOT_TOKEN);
const BACKEND_URL = process.env.RENDER_EXTERNAL_URL || 'https://your-app.onrender.com'; // URL Render –¥–ª—è API –∏ Webhook

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –∏ URL-encoded –¥–∞–Ω–Ω—ã—Ö
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º username
bot.start(async (ctx) => {
    const username = ctx.from.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    console.log(`${username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
    console.log('–ö–æ–Ω—Ç–µ–∫—Å—Ç:', ctx);
    try {
        await ctx.reply(
            `–ü—Ä–∏–≤–µ—Ç, @${username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –æ—Ç–ø—É—Å–∫ –≤ –¢–∞–π–ª–∞–Ω–¥–µ –µ—â—ë –ª—É—á—à–µ –∏ –ø—Ä–æ—â–µ!`
        );
        ctx.reply('–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', Markup.inlineKeyboard([
            Markup.button.webApp('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', process.env.REACT_APP_URL || 'https://mythaicomp.ru'),
        ]));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
bot.on('web_app_data', (ctx) => {
    const webAppData = ctx.webAppData;
    console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', webAppData);
});

// –ü—Ä–æ–∫—Å–∏-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
app.get('/yandex-proxy', async (req, res) => {
    try {
        const yandexUrl = req.query.url;
        console.log('–ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å –¥–ª—è URL:', yandexUrl);

        const response = await fetch(yandexUrl, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            },
        });

        res.set('Content-Type', response.headers.get('Content-Type'));
        response.body.pipe(res);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ /yandex-proxy:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Webhook Telegram
app.post('/bot', (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram –Ω–∞ /bot');
    bot.handleUpdate(req.body);
    res.sendStatus(200);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
const startServer = async () => {
    app.listen(PORT, async () => {
        console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        const webhookUrl = `${BACKEND_URL}/bot`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL Render –¥–ª—è Webhook
        try {
            await bot.telegram.setWebhook(webhookUrl);
            console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
            const webhookInfo = await bot.telegram.getWebhookInfo();
            console.log('–¢–µ–∫—É—â–∏–π Webhook:', webhookInfo);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook:', error);
        }
    });
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once('SIGINT', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞');
    bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞');
    bot.stop('SIGTERM');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer().catch((err) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', err);
});